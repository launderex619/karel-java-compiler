package Lexer;
/* The following code was generated by JFlex 1.6.1 */

//hecho por Carlos Carvajal VÃ¡zquez
/*===========Primera area: Codigo de usuario===========*/
//paquetes------------
import Parser.sym;
import java.util.*;
import java_cup.runtime.Symbol;
import Tokens.Token;
import Tokens.TokenError;
import java_cup.runtime.*;
/*===========segunda area: Opciones y declaraciones===========*/
%%
//codigo de usuario----> java sintaxis
%{
    ArrayList<Token> Tokens = new ArrayList<>();
    ArrayList<TokenError> tokenErrores = new ArrayList<>();

/*
    public Lexer(String argv[]){
    if (argv.length == 0) {
          System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
        }
        else {
          int firstFilePos = 0;
          String encodingName = "UTF-8";
          if (argv[0].equals("--encoding")) {
            firstFilePos = 2;
            encodingName = argv[1];
            try {
              java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid?
            } catch (Exception e) {
              System.out.println("Invalid encoding '" + encodingName + "'");
              return;
            }
          }
          for (int i = firstFilePos; i < argv.length; i++) {
            Lexer scanner = null;
            try {
              java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
              java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
              scanner = new Lexer(reader);
              while ( !scanner.zzAtEOF ) scanner.next_token();
            }
            catch (java.io.FileNotFoundException e) {
              System.out.println("File not found : \""+argv[i]+"\"");
            }
            catch (java.io.IOException e) {
              System.out.println("IO error scanning file \""+argv[i]+"\"");
              System.out.println(e);
            }
            catch (Exception e) {
              System.out.println("Unexpected exception:");
              e.printStackTrace();
            }
          }
        }
    } */
%}
%public             //genera clase publica
//nombre de la clase
%class Lexer
//las directivas de cup seran accesibles desde <sym>
%cupsym sym
%cup                //integracion con cup
%char               //control de caracteres
%unicode            //los caracteres de entrada seran tomados como de 16bits (formato unicode 16bit)
//%standalone         //esto es para que genere su propio main
%line               //accedo a la linea de la entrada actual
%column             //accedo a la columna de la entrada actual

//instrucciones al terminar el analisis
%eof{
    System.out.print("Lexemas: \n");
    for(Token lexema : Tokens){
        System.out.print("Lexema: " + lexema.getClave() + " Valor: " + lexema.getValor() + "\n");
    }
    Tokens.add( new Token("$"));
%eof}

//Expresiones regulares------------
definicionDeMetodo  = "void" | "define"
operacion           = "succ" | "pred"
operador            = "&&" | "||"
instruccion         = "turnoff" | "turnleft" | "move" | "pickbeeper" | "putbeeper"
funcionBooleana     = ("frontIsClear" | "frontIsBlocked" | "leftIsClear" | "leftIsBlocked" | "rightIsClear" | "rightIsBlocked" | "nextToABeeper" | "notNextToABeeper" | "anyBeepersInBeeperBag" | "noBeepersInBeeperBag" | "facingNorth" | "facingSouth" | "facingEast" | "facingWest" | "notFacingNorth" | "notFacingSouth" | "notFacingEast" | "notFacingWest")
identificador       = {letra} ({letra} | {digito} | "-")*
decimal             = [0-9] {digito}*
digito              = [1-9] | [0]
letra               = [a-zA-Z]

/*===========tercera area: Reglas lexicas===========*/
%%
//simbolos------------
 "class"                 {Tokens.add(new Token("class"));
                                    System.out.print("Token encontrado: " + yytext() + "\n");
                                     return new Symbol(sym.clas, yycolumn, yyline, yytext());
                                    }
 "program"               {Tokens.add(new Token("program" ));
                                    System.out.print("Token encontrado: " + yytext() + "\n");
                                     return new Symbol(sym.progra, yycolumn, yyline, yytext());
                                    }
 "{"                     {Tokens.add(new Token("{" ));
                                    System.out.print("Token encontrado: " + yytext() + "\n");
                                     return new Symbol(sym.llaveA, yycolumn, yyline, yytext());
                                    }
 "}"                     {Tokens.add(new Token("}" ));
                                    System.out.print("Token encontrado: " + yytext() + "\n");
                                     return new Symbol(sym.llaveC, yycolumn, yyline, yytext());
                                    }
 "("                     {Tokens.add(new Token("(" ));
                                    System.out.print("Token encontrado: " + yytext() + "\n");
                                     return new Symbol(sym.parenA, yycolumn, yyline, yytext());
                                    }
 ")"                     {Tokens.add(new Token(")" ));
                                    System.out.print("Token encontrado: " + yytext() + "\n");
                                     return new Symbol(sym.parenC, yycolumn, yyline, yytext());
                                    }
 "iszero"                {Tokens.add(new Token("iszero" ));
                                    System.out.print("Token encontrado: " + yytext() + "\n");
                                     return new Symbol(sym.iszero, yycolumn, yyline, yytext());
                                    }
 "if"                    {Tokens.add(new Token("if" ));
                                    System.out.print("Token encontrado: " + yytext() + "\n");
                                     return new Symbol(sym.iff, yycolumn, yyline, yytext());
                                    }
 "else"                  {Tokens.add(new Token("else" ));
                                    System.out.print("Token encontrado: " + yytext() + "\n");
                                     return new Symbol(sym.els, yycolumn, yyline, yytext());
                                    }
 "while"                 {Tokens.add(new Token("while" ));
                                    System.out.print("Token encontrado: " + yytext() + "\n");
                                     return new Symbol(sym.whil, yycolumn, yyline, yytext());
                                    }
 "iterate"               {Tokens.add(new Token("iterate" ));
                                    System.out.print("Token encontrado: " + yytext() + "\n");
                                     return new Symbol(sym.iterate, yycolumn, yyline, yytext());
                                    }
 "return"                {Tokens.add(new Token("return" ));
                                    System.out.print("Token encontrado: " + yytext() + "\n");
                                    return new Symbol(sym.ret, yycolumn, yyline, yytext());
                                    }
 ";"                     {Tokens.add(new Token(";" ));
                                    System.out.print("Token encontrado: " + yytext() + "\n");
                                    return new Symbol(sym.finIns, yycolumn, yyline, yytext());
                                    }
 "!"                     {Tokens.add(new Token("!" ));
                                    System.out.print("Token encontrado: " + yytext() + "\n");
                                    return new Symbol(sym.negacion, yycolumn, yyline, yytext());
                                    }

//simbolos Expresiones Regulares----------
 {operacion}             {Tokens.add(new Token("operacion", yytext() ));
                                    System.out.print("Token encontrado: " + yytext() + "\n");
                                    return new Symbol(sym.operacion, yycolumn, yyline, yytext());
                                    }
 {definicionDeMetodo}    {Tokens.add(new Token("definicionDeMetodo", yytext() ));
                                    System.out.print("Token encontrado: " + yytext() + "\n");
                                    return new Symbol(sym.definicionDeMetodo, yycolumn, yyline, yytext());
                                    }
 {operador}              {Tokens.add(new Token("operador", yytext()));
                                    System.out.print("Token encontrado: " + yytext() + "\n");
                                    return new Symbol(sym.operador, yycolumn, yyline, yytext());
                                    }
 {instruccion}           {Tokens.add(new Token("instruccion", yytext()));
                                    System.out.print("Token encontrado: " + yytext() + "\n");
                                    return new Symbol(sym.instruccion, yycolumn, yyline, yytext());
                                    }
 {funcionBooleana}       {Tokens.add(new Token("funcionBooleana", yytext() ));
                                    System.out.print("Token encontrado: " + yytext() + "\n");
                                    return new Symbol(sym.funcionBooleana, yycolumn, yyline, yytext());
                                    }
 {identificador}         {Tokens.add(new Token("identificador", yytext() ));
                                    System.out.print("Token encontrado: " + yytext() + "\n");
                                    return new Symbol(sym.identificador, yycolumn, yyline, yytext());
                                    }
 {decimal}               {Tokens.add(new Token("decimal", yytext() ));
                                    System.out.print("Token encontrado: " + yytext() + "\n");
                                    return new Symbol(sym.decimal, yycolumn, yyline, yytext());
                                    }

 [ \t\r\n\f]              {  }
//errores------------
.                                  {System.out.print("Error lexico: " + yytext() + " Simbolo no existe en el lenguaje\nLinea: " + yyline + " Columna: " + yycolumn);
                                    tokenErrores.add(new TokenError(yytext(), "Error lexico", "Simbolo no existe en el lenguaje", yyline, yycolumn));
                                    }
