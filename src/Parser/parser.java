
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 16 17:57:52 CDT 2019
//----------------------------------------------------

package Parser;

import Tokens.Token;
import Tokens.TokenError;
import Tokens.Nodo;
import java_cup.runtime.Symbol;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 16 17:57:52 CDT 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\002\003\000\002\026" +
    "\007\000\002\027\004\000\002\027\003\000\002\030\005" +
    "\000\002\003\006\000\002\031\003\000\002\031\002\000" +
    "\002\004\004\000\002\005\005\000\002\005\003\000\002" +
    "\006\004\000\002\007\003\000\002\007\005\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\012\005\000\002\012\004\000\002" +
    "\011\004\000\002\011\003\000\002\013\005\000\002\015" +
    "\003\000\002\015\003\000\002\015\006\000\002\016\005" +
    "\000\002\016\003\000\002\017\005\000\002\017\003\000" +
    "\002\020\004\000\002\020\003\000\002\021\006\000\002" +
    "\021\003\000\002\021\003\000\002\021\005\000\002\022" +
    "\007\000\002\022\011\000\002\023\007\000\002\024\007" +
    "\000\002\014\005\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\004\012\006\001\002\000\004\002\142\001" +
    "\002\000\004\002\000\001\002\000\004\013\007\001\002" +
    "\000\004\004\010\001\002\000\006\013\013\023\012\001" +
    "\002\000\004\013\013\001\002\000\004\027\127\001\002" +
    "\000\004\006\017\001\002\000\004\005\ufffd\001\002\000" +
    "\004\005\016\001\002\000\004\002\uffff\001\002\000\004" +
    "\007\051\001\002\000\004\004\021\001\002\000\024\004" +
    "\021\005\034\010\023\015\035\017\036\020\025\021\042" +
    "\025\024\027\043\001\002\000\004\005\ufffc\001\002\000" +
    "\026\004\ufff1\005\ufff1\010\ufff1\015\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\021\ufff1\025\ufff1\027\ufff1\001\002\000\004\006" +
    "\017\001\002\000\004\006\121\001\002\000\026\004\ufff2" +
    "\005\ufff2\010\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\025\ufff2\027\ufff2\001\002\000\026\004\uffee\005\uffee" +
    "\010\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\025" +
    "\uffee\027\uffee\001\002\000\026\004\uffec\005\uffec\010\uffec" +
    "\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\025\uffec\027" +
    "\uffec\001\002\000\026\004\ufff0\005\ufff0\010\ufff0\015\ufff0" +
    "\016\ufff0\017\ufff0\020\ufff0\021\ufff0\025\ufff0\027\ufff0\001" +
    "\002\000\026\004\uffef\005\uffef\010\uffef\015\uffef\016\uffef" +
    "\017\uffef\020\uffef\021\uffef\025\uffef\027\uffef\001\002\000" +
    "\026\004\uffed\005\uffed\010\uffed\015\uffed\016\uffed\017\uffed" +
    "\020\uffed\021\uffed\025\uffed\027\uffed\001\002\000\032\004" +
    "\uffe9\005\uffe9\010\uffe9\013\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\023\uffe9\025\uffe9\027\uffe9\001\002\000" +
    "\004\006\113\001\002\000\004\006\057\001\002\000\004" +
    "\005\056\001\002\000\024\004\021\005\uffe7\010\023\015" +
    "\035\017\036\020\025\021\042\025\024\027\043\001\002" +
    "\000\026\004\uffeb\005\uffeb\010\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\021\uffeb\025\uffeb\027\uffeb\001\002\000\004" +
    "\006\017\001\002\000\004\006\044\001\002\000\006\007" +
    "\051\030\050\001\002\000\004\010\047\001\002\000\004" +
    "\010\ufff4\001\002\000\026\004\uffe6\005\uffe6\010\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\025\uffe6\027\uffe6" +
    "\001\002\000\004\007\052\001\002\000\012\004\ufff5\007" +
    "\ufff5\010\ufff5\024\ufff5\001\002\000\004\010\ufff3\001\002" +
    "\000\004\010\054\001\002\000\026\004\uffd3\005\uffd3\010" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\025\uffd3" +
    "\027\uffd3\001\002\000\004\005\uffe8\001\002\000\032\004" +
    "\uffea\005\uffea\010\uffea\013\uffea\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\023\uffea\025\uffea\027\uffea\001\002\000" +
    "\012\006\060\011\067\014\070\026\063\001\002\000\014" +
    "\006\060\007\051\011\067\014\070\026\063\001\002\000" +
    "\006\007\uffdf\024\107\001\002\000\006\007\uffda\024\uffda" +
    "\001\002\000\006\007\uffdb\024\uffdb\001\002\000\006\007" +
    "\uffe1\024\105\001\002\000\006\007\uffdd\024\uffdd\001\002" +
    "\000\004\007\103\001\002\000\010\006\060\014\070\026" +
    "\063\001\002\000\004\006\071\001\002\000\010\022\075" +
    "\027\074\030\072\001\002\000\004\007\uffe5\001\002\000" +
    "\004\007\101\001\002\000\004\007\uffe4\001\002\000\004" +
    "\006\076\001\002\000\010\022\075\027\074\030\072\001" +
    "\002\000\004\007\100\001\002\000\004\007\uffe3\001\002" +
    "\000\006\007\uffdc\024\uffdc\001\002\000\006\007\uffde\024" +
    "\uffde\001\002\000\022\004\021\010\023\015\035\017\036" +
    "\020\025\021\042\025\024\027\043\001\002\000\026\004" +
    "\uffd6\005\uffd6\010\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\025\uffd6\027\uffd6\001\002\000\012\006\060\011" +
    "\067\014\070\026\063\001\002\000\004\007\uffe2\001\002" +
    "\000\012\006\060\011\067\014\070\026\063\001\002\000" +
    "\006\007\uffe0\024\uffe0\001\002\000\004\007\112\001\002" +
    "\000\006\007\uffd9\024\uffd9\001\002\000\012\006\060\011" +
    "\067\014\070\026\063\001\002\000\004\007\115\001\002" +
    "\000\022\004\021\010\023\015\035\017\036\020\025\021" +
    "\042\025\024\027\043\001\002\000\026\004\uffd8\005\uffd8" +
    "\010\uffd8\015\uffd8\016\117\017\uffd8\020\uffd8\021\uffd8\025" +
    "\uffd8\027\uffd8\001\002\000\022\004\021\010\023\015\035" +
    "\017\036\020\025\021\042\025\024\027\043\001\002\000" +
    "\026\004\uffd7\005\uffd7\010\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\025\uffd7\027\uffd7\001\002\000\010\022" +
    "\075\027\074\030\072\001\002\000\004\007\123\001\002" +
    "\000\022\004\021\010\023\015\035\017\036\020\025\021" +
    "\042\025\024\027\043\001\002\000\026\004\uffd5\005\uffd5" +
    "\010\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\025" +
    "\uffd5\027\uffd5\001\002\000\004\010\126\001\002\000\026" +
    "\004\uffd4\005\uffd4\010\uffd4\015\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\021\uffd4\025\uffd4\027\uffd4\001\002\000\004\006\134" +
    "\001\002\000\004\004\021\001\002\000\006\013\ufff9\023" +
    "\012\001\002\000\004\013\ufffa\001\002\000\004\013\ufffb" +
    "\001\002\000\006\007\051\027\137\001\002\000\004\004" +
    "\ufff6\001\002\000\004\004\ufff8\001\002\000\004\007\140" +
    "\001\002\000\004\004\ufff7\001\002\000\004\005\ufffe\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\006\002\003\026\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\010\027\014\030\013\001\001\000\004\030" +
    "\140\001\001\000\004\004\127\001\001\000\004\006\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\021\001\001\000\024" +
    "\010\037\011\036\012\025\013\040\014\032\022\030\023" +
    "\031\024\026\025\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\037\011\054\012\025\013\040\014\032\022" +
    "\030\023\031\024\026\025\027\001\001\000\002\001\001" +
    "\000\004\006\052\001\001\000\006\006\045\007\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\061\016\065\017" +
    "\063\020\060\021\064\001\001\000\014\006\061\016\110" +
    "\017\063\020\060\021\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\061\021\101\001" +
    "\001\000\002\001\001\000\004\015\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\010" +
    "\103\012\025\013\040\014\032\022\030\023\031\024\026" +
    "\025\027\001\001\000\002\001\001\000\014\006\061\016" +
    "\105\017\063\020\060\021\064\001\001\000\002\001\001" +
    "\000\012\006\061\017\107\020\060\021\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\061\016\113\017\063\020\060\021\064\001\001\000" +
    "\002\001\001\000\022\010\115\012\025\013\040\014\032" +
    "\022\030\023\031\024\026\025\027\001\001\000\002\001" +
    "\001\000\022\010\117\012\025\013\040\014\032\022\030" +
    "\023\031\024\026\025\027\001\001\000\002\001\001\000" +
    "\004\015\121\001\001\000\002\001\001\000\022\010\123" +
    "\012\025\013\040\014\032\022\030\023\031\024\026\025" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\135\006\134\001\001\000\004\012" +
    "\130\001\001\000\006\003\131\031\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<Token> Tokens = new ArrayList<>();
    public ArrayList<TokenError> tokenErrores = new ArrayList<>();
    public int contadorNodos = 0;
    public static Nodo raiz;

    //metodo que se llama automaticamente ante algun error sintactico:
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.print("Error Sintactico: " + lexema + " Simbolo no existe en el lenguaje\nLinea: " + fila + " Columna: " + columna);
        tokenErrores.add(new TokenError(lexema, "Error lexico", "Simbolo no existe en el lenguaje", fila, columna));
    }
    
    //metodo que se llama automaticamente ante algun error del que no es posible recuperarse:
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.print("Error Sintactico, PANIC MODE: " + lexema + " Simbolo no existe en el lenguaje\nLinea: " + fila + " Columna: " + columna);
        tokenErrores.add(new TokenError(lexema, "Error lexico", "Simbolo no existe en el lenguaje", fila, columna));    
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION_RETURN ::= ret ARGUMENTO_VACIO finIns 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vacleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vacright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                 Nodo n = new Nodo();
                                                                 n.setEtiqueta("Expresion return");
                                                                 n.setIdNodo(parser.contadorNodos++);
                                                                 n.setValor(re.toString());
                                                                 n.addHijo((Nodo) vac);
                                                                 RESULT = n;
                                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_RETURN",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION_GENERICA ::= instruccion ARGUMENTO_VACIO finIns 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vacleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vacright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int finsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                   Nodo n = new Nodo();
                                                                   Nodo n1 = new Nodo();
                                                                   Nodo n2 = new Nodo();
                                                                   n1.setValor(inst.toString());
                                                                   n2.setValor(fins.toString());
                                                                   n1.setIdNodo(parser.contadorNodos++);
                                                                   n2.setIdNodo(parser.contadorNodos++);
                                                                   n.setEtiqueta("Expresion generica");
                                                                   n.setIdNodo(parser.contadorNodos++);
                                                                   n.setValor(inst.toString());
                                                                   n.addHijo(n1);
                                                                   n.addHijo((Nodo) vac);
                                                                   n.addHijo(n2);
                                                                   RESULT = n;
                                                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_GENERICA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION_ITERATE ::= iterate parenA EXPRESION_ENTERA parenC EXPRESION 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                             Nodo n = new Nodo();
                                                                             n.setEtiqueta("Expresion iterate");
                                                                             n.setValor("iterate");
                                                                             n.setIdNodo(parser.contadorNodos++);
                                                                             n.addHijo((Nodo) dec);
                                                                             n.addHijo((Nodo) expr);
                                                                             RESULT = n;
                                                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ITERATE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION_WHILE ::= whil parenA TERMINO parenC EXPRESION 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                  Nodo n = new Nodo();
                                                                  n.setEtiqueta("Expresion while");
                                                                  n.setValor( "" + (int)(Math.random() * 10));
                                                                  n.setIdNodo(parser.contadorNodos++);
                                                                  n.addHijo((Nodo) term);
                                                                  n.addHijo((Nodo) expr);
                                                                  RESULT = n;
                                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_WHILE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION_IF ::= iff parenA TERMINO parenC EXPRESION els EXPRESION 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                   Nodo n = new Nodo();
                                                                   n.setEtiqueta("Expresion if");
                                                                   n.setIdNodo(parser.contadorNodos++);
                                                                   n.setValor((Math.random() < .5)? "true" : "false" );
                                                                   n.addHijo((Nodo) term);
                                                                   n.addHijo((Nodo) expr1);
                                                                   n.addHijo((Nodo) expr2);
                                                                   n.getHijos().get(2).setEtiqueta("Expresion else");
                                                                   n.getHijos().get(2).setValor("else");
                                                                   RESULT = n;
                                                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_IF",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION_IF ::= iff parenA TERMINO parenC EXPRESION 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                           Nodo n = new Nodo();
                                                                           n.setEtiqueta("Expresion if");
                                                                           n.setIdNodo(parser.contadorNodos++);
                                                                           n.setValor((Math.random() < .5)? "true" : "false" );
                                                                           n.addHijo((Nodo) term);
                                                                           n.addHijo((Nodo) expr);
                                                                           RESULT = n;
                                                                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_IF",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CLAUSULA_ATOMICA ::= parenA TERMINO parenC 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                             Nodo n = new Nodo();
                                                             n.setEtiqueta("Clausula atomica");
                                                             n.setIdNodo(parser.contadorNodos++);
                                                             n.addHijo((Nodo) term);
                                                             RESULT = n;
                                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLAUSULA_ATOMICA",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CLAUSULA_ATOMICA ::= ARGUMENTO_VACIO 
            {
              Object RESULT =null;
		int argVacleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argVacright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object argVac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                         Nodo n = new Nodo();
                                                         n.setEtiqueta("Clausula atomica");
                                                         n.setIdNodo(parser.contadorNodos++);
                                                         n.addHijo((Nodo) argVac);
                                                         RESULT = n;
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLAUSULA_ATOMICA",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CLAUSULA_ATOMICA ::= funcionBooleana 
            {
              Object RESULT =null;
		int funcBolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcBolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funcBol = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                          Nodo n = new Nodo();
                                                          n.setEtiqueta("Clausula atomica");
                                                          n.setIdNodo(parser.contadorNodos++);
                                                          n.setValor(funcBol.toString());
                                                          RESULT = n;
                                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLAUSULA_ATOMICA",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CLAUSULA_ATOMICA ::= iszero parenA EXPRESION_ENTERA parenC 
            {
              Object RESULT =null;
		int isZleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int isZright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object isZ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprEntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprEntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprEnt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                                  Nodo n = new Nodo();
                                                                                  n.setEtiqueta("Clausula atomica");
                                                                                  n.setIdNodo(parser.contadorNodos++);
                                                                                  n.setValor(isZ.toString());
                                                                                  n.addHijo((Nodo) exprEnt);
                                                                                  RESULT = n;
                                                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLAUSULA_ATOMICA",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CLAUSULA_NO ::= CLAUSULA_ATOMICA 
            {
              Object RESULT =null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                           Nodo n = new Nodo();
                                                           n.setEtiqueta("Clausula No");
                                                           n.setIdNodo(parser.contadorNodos++);
                                                           n.addHijo((Nodo) atom);
                                                           RESULT = n;
                                                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLAUSULA_NO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CLAUSULA_NO ::= negacion CLAUSULA_ATOMICA 
            {
              Object RESULT =null;
		int negleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int negright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object neg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                   Nodo n = new Nodo();
                                                                   n.setEtiqueta("Clausula No");
                                                                   n.setIdNodo(parser.contadorNodos++);
                                                                   n.setValor(neg.toString());
                                                                   n.addHijo((Nodo) atom);
                                                                   RESULT = n;
                                                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLAUSULA_NO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CLAUSULA_Y ::= CLAUSULA_NO 
            {
              Object RESULT =null;
		int noleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object no = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                     Nodo n = new Nodo();
                                                     n.setEtiqueta("Clausula Y");
                                                     n.setIdNodo(parser.contadorNodos++);
                                                     n.addHijo((Nodo) no);
                                                     RESULT = n;
                                                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLAUSULA_Y",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CLAUSULA_Y ::= CLAUSULA_NO operador CLAUSULA_Y 
            {
              Object RESULT =null;
		int noleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int noright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object no = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                            Nodo n = new Nodo();
                                                                            n.setEtiqueta("Clausula Y");
                                                                            n.setIdNodo(parser.contadorNodos++);
                                                                            n.addHijo((Nodo) no);
                                                                            n.setValor(op.toString());
                                                                            n.addHijo((Nodo) y);
                                                                            RESULT = n;
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLAUSULA_Y",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TERMINO ::= CLAUSULA_Y 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                Nodo n = new Nodo();
                                                n.setEtiqueta("Termino");
                                                n.setIdNodo(parser.contadorNodos++);
                                                n.addHijo((Nodo) y);
                                                RESULT = n;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TERMINO ::= CLAUSULA_Y operador TERMINO 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                        Nodo n = new Nodo();
                                                                        n.setEtiqueta("Termino");
                                                                        n.setIdNodo(parser.contadorNodos++);
                                                                        n.addHijo((Nodo) y);
                                                                        n.setValor(op.toString());
                                                                        n.addHijo((Nodo) term);
                                                                        RESULT = n;
                                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION_ENTERA ::= operacion parenA EXPRESION_ENTERA parenC 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprEntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprEntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprEnt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                                        Nodo n = new Nodo();
                                                                                        n.setEtiqueta("Expresion entera");
                                                                                        n.setIdNodo(parser.contadorNodos++);
                                                                                        n.setValor(op.toString());
                                                                                        n.addHijo((Nodo) exprEnt);
                                                                                        RESULT = n;
                                                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ENTERA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION_ENTERA ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                      Nodo n = new Nodo();
                                                      n.setEtiqueta("Expresion entera");
                                                      n.setIdNodo(parser.contadorNodos++);
                                                      n.setValor(id.toString());
                                                      RESULT = n;
                                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ENTERA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION_ENTERA ::= decimal 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                           Nodo n = new Nodo();
                                           n.setEtiqueta("Expresion entera");
                                           n.setIdNodo(parser.contadorNodos++);
                                           n.setValor(dec.toString());
                                           RESULT = n;
                                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ENTERA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION_DE_LLAMADA ::= identificador ARGUMENTO_OPCIONAL finIns 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object argOpt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                                 Nodo n = new Nodo();
                                                                                 n.setEtiqueta("Expresion de llamada");
                                                                                 n.setIdNodo(parser.contadorNodos++);
                                                                                 n.setValor(id.toString());
                                                                                 n.addHijo((Nodo) argOpt);
                                                                                 RESULT = n;
                                                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_DE_LLAMADA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESIONES ::= EXPRESION 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                    Nodo n = new Nodo();
                                                    n.setEtiqueta("Expresiones");
                                                    n.setIdNodo(parser.contadorNodos++);
                                                    n.addHijo((Nodo) expr);
                                                    RESULT = n;
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESIONES ::= EXPRESION EXPRESIONES 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expresleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expres = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                    Nodo n = new Nodo();
                                                    n.setEtiqueta("Expresiones");
                                                    n.setIdNodo(parser.contadorNodos++);
                                                    n.addHijo((Nodo) expr);
                                                    n.addHijo((Nodo) expres);
                                                    RESULT = n;
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BLOQUE ::= llaveA llaveC 
            {
              Object RESULT =null;
		
                                                   Nodo n = new Nodo();
                                                   n.setEtiqueta("Bloque");
                                                   n.setIdNodo(parser.contadorNodos++);
                                                   n.setValor("Vacio");
                                                   RESULT = n;
                                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BLOQUE ::= llaveA EXPRESIONES llaveC 
            {
              Object RESULT =null;
		int llaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lla = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                Nodo n = new Nodo();
                                                                Nodo n1 = new Nodo(); n1.setEtiqueta(lla.toString()); n1.setIdNodo(parser.contadorNodos++);
                                                                Nodo n2 = new Nodo(); n2.setEtiqueta(llc.toString()); n2.setIdNodo(parser.contadorNodos++);
                                                                n.setEtiqueta("Bloque");
                                                                n.setIdNodo(parser.contadorNodos++);
                                                                n.addHijo(n1);
                                                                n.addHijo((Nodo) expr);
                                                                n.addHijo(n2);
                                                                RESULT = n;
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= EXPRESION_DE_LLAMADA 
            {
              Object RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object call = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                               Nodo n = new Nodo();
                                                               n.setEtiqueta("Expresion");
                                                               n.setIdNodo(parser.contadorNodos++);
                                                               n.addHijo((Nodo) call);
                                                               RESULT = n;
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION ::= EXPRESION_RETURN 
            {
              Object RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                          Nodo n = new Nodo();
                                                          n.setEtiqueta("Expresion");
                                                          n.setIdNodo(parser.contadorNodos++);
                                                          n.addHijo((Nodo) ret);
                                                          RESULT = n;
                                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION ::= EXPRESION_GENERICA 
            {
              Object RESULT =null;
		int genleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int genright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object gen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                            Nodo n = new Nodo();
                                                            n.setEtiqueta("Expresion");
                                                            n.setIdNodo(parser.contadorNodos++);
                                                            n.addHijo((Nodo) gen);
                                                            RESULT = n;
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESION ::= EXPRESION_ITERATE 
            {
              Object RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                          Nodo n = new Nodo();
                                                          n.setEtiqueta("Expresion");
                                                          n.setIdNodo(parser.contadorNodos++);
                                                          n.addHijo((Nodo) it);
                                                          RESULT = n;
                                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESION ::= EXPRESION_WHILE 
            {
              Object RESULT =null;
		int whilleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object whil = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                       Nodo n = new Nodo();
                                                       n.setEtiqueta("Expresion");
                                                       n.setIdNodo(parser.contadorNodos++);
                                                       n.addHijo((Nodo) whil);
                                                       RESULT = n;
                                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESION ::= EXPRESION_IF 
            {
              Object RESULT =null;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iff = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                 Nodo n = new Nodo();
                                                 n.setEtiqueta("Expresion");
                                                 n.setIdNodo(parser.contadorNodos++);
                                                 n.addHijo((Nodo) iff);
                                                 RESULT = n;
                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRESION ::= finIns 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRESION ::= BLOQUE 
            {
              Object RESULT =null;
		int bloqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bloq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            Nodo n = new Nodo();
                                            n.setEtiqueta("Expresion");
                                            n.setIdNodo(parser.contadorNodos++);
                                            n.addHijo((Nodo) bloq);
                                            RESULT = n;
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ARGUMENTO_OPCIONAL ::= parenA decimal parenC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                 System.out.print("argumento opt");
                                                                 Nodo n = new Nodo();
                                                                 n.setEtiqueta("Argumento opcional");
                                                                 n.setIdNodo(parser.contadorNodos++);
                                                                 n.setValor(id.toString());
                                                                 RESULT = n;
                                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTO_OPCIONAL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ARGUMENTO_OPCIONAL ::= ARGUMENTO_VACIO 
            {
              Object RESULT =null;
		int argVacleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argVacright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object argVac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                           System.out.print("argumento opt");
                                                           Nodo n = new Nodo();
                                                           n.setEtiqueta("Argumento opcional");
                                                           n.setIdNodo(parser.contadorNodos++);
                                                           n.addHijo((Nodo) argVac);
                                                           RESULT = n;
                                                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTO_OPCIONAL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ARGUMENTO_VACIO ::= parenA parenC 
            {
              Object RESULT =null;
		
                                              System.out.print("argumento vacio");
                                              Nodo n = new Nodo();
                                              n.setEtiqueta("Argumento vacio");
                                              n.setIdNodo(parser.contadorNodos++);
                                              n.setValor("()");
                                              RESULT = n;
                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTO_VACIO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAMETRO_OPCIONAL ::= ARGUMENTO_VACIO 
            {
              Object RESULT =null;
		int argVacleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argVacright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object argVac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                               System.out.print("Parametro opcional");
                                                               Nodo n = new Nodo();
                                                               n.setEtiqueta("Parametro opcional");
                                                               n.setIdNodo(parser.contadorNodos++);
                                                               n.addHijo((Nodo) argVac);
                                                               RESULT = n;
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_OPCIONAL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PARAMETRO_OPCIONAL ::= parenA identificador parenC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                System.out.print("Parametro opcional");
                                                                Nodo n = new Nodo();
                                                                n.setEtiqueta("Parametro opcional");
                                                                n.setIdNodo(parser.contadorNodos++);
                                                                n.setValor(id.toString());
                                                                RESULT = n;
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_OPCIONAL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FIRMA_DE_METODO ::= identificador PARAMETRO_OPCIONAL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int parOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parOpt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                           System.out.print("Firma de metodo");
                                                                           Nodo n = new Nodo();
                                                                           n.setEtiqueta("Firma de metodo");
                                                                           n.setIdNodo(parser.contadorNodos++);
                                                                           n.setValor(id.toString());
                                                                           n.addHijo((Nodo) parOpt);
                                                                           RESULT = n;
                                                                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIRMA_DE_METODO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION_DE_METODO_e ::= 
            {
              Object RESULT =null;
		
                                   System.out.print("Declaracion de metodo e");
                                   Nodo n = new Nodo();
                                   n.setEtiqueta("Declaracion de metodo_e nulo");
                                   n.setIdNodo(parser.contadorNodos++);
                                   n.setValor("vacio");
                                   RESULT = n;
                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_DE_METODO_e",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION_DE_METODO_e ::= DECLARACION_DE_METODO 
            {
              Object RESULT =null;
		int decMetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decMetright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object decMet = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                             System.out.print("Declaracion de metodo e");
                                                             Nodo n = new Nodo();
                                                             n.setEtiqueta("Declaracion de metodo_e");
                                                             n.setIdNodo(parser.contadorNodos++);
                                                             n.addHijo((Nodo) decMet);
                                                             RESULT = n;
                                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_DE_METODO_e",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION_DE_METODO ::= definicionDeMetodo FIRMA_DE_METODO BLOQUE DECLARACION_DE_METODO_e 
            {
              Object RESULT =null;
		int defMleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int defMright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object defM = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int firMetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int firMetright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object firMet = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bloqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bloq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int metEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int metEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object metE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                                System.out.print("Declaracion de metodo");
                                                                                Nodo n = new Nodo();
                                                                                Nodo def = new Nodo(); def.setValor(defM.toString());
                                                                                def.setIdNodo(parser.contadorNodos++);
                                                                                n.setEtiqueta("Declaracion de metodo");
                                                                                n.setIdNodo(parser.contadorNodos++);
                                                                                n.addHijo( def);
                                                                                n.addHijo((Nodo) firMet);
                                                                                n.addHijo((Nodo) bloq);
                                                                                n.addHijo((Nodo) metE);
                                                                                RESULT = n;
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_DE_METODO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FIN ::= progra ARGUMENTO_VACIO BLOQUE 
            {
              Object RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argVacleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argVacright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object argVac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bloqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bloq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                                  System.out.print("FIN");
                                                                                  Nodo n = new Nodo();
                                                                                  Nodo pro = new Nodo();
                                                                                  pro.setValor(pr.toString());
                                                                                  pro.setIdNodo(parser.contadorNodos++);
                                                                                  n.setEtiqueta("FIN");
                                                                                  n.setIdNodo(parser.contadorNodos++);
                                                                                  n.addHijo(pro);
                                                                                  n.addHijo((Nodo) argVac);
                                                                                  n.addHijo((Nodo) bloq);
                                                                                  RESULT = n;
                                                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIN",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= FIN 
            {
              Object RESULT =null;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                             System.out.print("Inicio");
                                             Nodo n = new Nodo();
                                             n.setEtiqueta("INICIO");
                                             n.setIdNodo(parser.contadorNodos++);
                                             n.addHijo((Nodo) fin);
                                             RESULT = n;
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= DECLARACION_DE_METODO FIN 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                      System.out.print("Inicio");
                                                                      Nodo n = new Nodo();
                                                                      n.setEtiqueta("INICIO");
                                                                      n.setIdNodo(parser.contadorNodos++);
                                                                      n.addHijo((Nodo) dec);
                                                                      n.addHijo((Nodo) fin);
                                                                      RESULT = n;
                                                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO_PROGRAMA ::= clas progra llaveA INICIO llaveC 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ll = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lllleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lllright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lll = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                            System.out.print("Inicio programa");
                                                            Nodo n = new Nodo();
                                                            Nodo c[] = new Nodo[4];
                                                            c[0] = new Nodo();c[1] = new Nodo();c[2] = new Nodo();c[3] = new Nodo();
                                                            n.setEtiqueta("INICIO PROGRAMA");
                                                            c[0].setValor(cl.toString());
                                                            c[1].setValor(pr.toString());
                                                            c[2].setValor(ll.toString());
                                                            c[3].setValor(lll.toString());
                                                            c[0].setIdNodo(parser.contadorNodos++);
                                                            c[1].setIdNodo(parser.contadorNodos++);
                                                            c[2].setIdNodo(parser.contadorNodos++);
                                                            c[3].setIdNodo(parser.contadorNodos++);
                                                            n.setIdNodo(parser.contadorNodos++);
                                                            n.addHijo(c[0]);
                                                            n.addHijo(c[1]);
                                                            n.addHijo(c[2]);
                                                            n.addHijo((Nodo) ini);
                                                            n.addHijo(c[3]);
                                                            RESULT = n;
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO_PROGRAMA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // DECLARACION_DEL_PROGRAMA ::= INICIO_PROGRAMA 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                    System.out.print("Inicio del programa");
                                                    Nodo n = new Nodo();
                                                    n.setEtiqueta("DECLARACION_DEL_PROGRAMA");
                                                    n.setIdNodo(parser.contadorNodos++);
                                                    n.addHijo((Nodo) ini);
                                                    parser.raiz = (Nodo) n;
                                                    RESULT = n;
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_DEL_PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= DECLARACION_DEL_PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

